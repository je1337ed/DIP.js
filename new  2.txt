#include <cstdio> //
#include <cstdlib> // required by DevC++
#include <iostream> // for I/O and calculation
#include <cmath> //
using namespace std;
void fft_N_func(long, double* r, double* i); // prototype declaration
//******************* main program *******************
int main (int nNumberofArgs, char* pszArgs[ ]) { // arguments needed for Dev-C++ I/O
const long N = 32; double r[N] = {0.}, i[N]= {0.}; // REPLACE WITH YOUR NUMBERS
long n; double twopi = 6.2831853071795865, t;
for (n = 0; n < N; n++) { // generate saw tooth test data - DELETE IF USING OTHER DATA
t = twopi*n/N; //unconventional way of doing things - see Chapter 6
r[n]=1.1+sin(t)+.5*sin(2.*t)+(1./3.)*sin(3.*t)+.25*sin(4.*t)+.2*sin(5.*t)+(1./6.)*sin(6.*t)+(1./7.)*sin(7.*t);
} // if you print r[n], you'll see that the saw tooth goes a little negative at the end
fft_N_func(N, r, i) ;
cout<<"\nfft_N_func results for N = " << N;
cout<<"\n n r[n] i[n] amplitude phase(radians)\n";
double amp, phase;
for (n = 0; n < N; n++) {
r[n] = r[n]/N ; i[n] = i[n]/N ; // scale outputs
amp = sqrt( r[n]*r[n] + i[n]*i[n] ) ;
if (r[n]==0 && i[n]==0) phase = 0;
else phase = atan2(i[n],r[n]);
printf("%2d\t%9.4f\t%9.4f\t%9.4f\t%9.4f\n", n, r[n], i[n], amp, phase);
} //end for loop over n
system ("PAUSE");
return 0;
} // end main
//******************* fft_N_func ***************************************
void fft_N_func (long N, double* r, double* i) {
long M = N/2, lo = 0, hi, k, m, delta; double t, t1, x, y, twcos, twsin, pi = 3.1415926535897932 ;
for (delta = M; delta > 0; delta = delta/2) {
x = pi/delta; hi = 0;
for (k = 0; k < M/delta; k++) {
lo = hi; hi = lo + delta;
for (m = 0; m < delta; m++) {
t = r[lo] - r[hi] ; r[lo] = r[lo] + r[hi] ; r[hi] = t ;
t1 = i[lo] - i[hi] ; i[lo] = i[lo] + i[hi] ; i[hi] = t1 ;
if ( m > 0 && delta > 1 ) { // do twiddle multiply, but not for twiddles of 0
y = m*x;
twcos = cos (y) ; twsin = -sin (y) ;
t = (r[hi] - i[hi])*twsin ;
r[hi] = t + r[hi]*(twcos - twsin) ;
i[hi] = t + i[hi]*(twcos + twsin) ;
} // end if

lo++; hi++;
} // end for over m
} // end for over k
} // end for over delta
//******** bit reverse for radix 2 *****
long J = 0, K, L, N2 = N/2;
for (L = 0; L < (N-2); L++) {
if (L < J) {
t = r[L]; r[L] = r[J]; r[J] = t;
t1 = i[L]; i[L] = i[J]; i[J] = t1;
}
K = N2;
while (K <= J) {
J = J - K; K = K/2;
} // end while
J = J + K;
} // end for ***** bit reverse done ******
} // end fft_N_func